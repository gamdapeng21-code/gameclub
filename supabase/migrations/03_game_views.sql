-- 创建游戏浏览数据表
CREATE TABLE IF NOT EXISTS game_views (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  game_id UUID NOT NULL,
  view_date DATE NOT NULL DEFAULT CURRENT_DATE,
  view_count INTEGER NOT NULL DEFAULT 1,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  -- 添加唯一约束，确保每个游戏每天只有一条记录
  UNIQUE(game_id, view_date),
  
  -- 单独添加外键约束
  CONSTRAINT game_views_game_id_fkey FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE
);

-- 添加索引以提高查询性能
CREATE INDEX IF NOT EXISTS idx_game_views_game_id ON game_views(game_id);
CREATE INDEX IF NOT EXISTS idx_game_views_view_date ON game_views(view_date);

-- 创建视图统计函数
CREATE OR REPLACE FUNCTION increment_game_view(game_id_param UUID)
RETURNS VOID AS $$
BEGIN
  -- 尝试更新当天的记录
  UPDATE game_views
  SET view_count = view_count + 1
  WHERE game_id = game_id_param AND view_date = CURRENT_DATE;
  
  -- 如果没有记录，则插入新记录
  IF NOT FOUND THEN
    INSERT INTO game_views (game_id, view_date, view_count)
    VALUES (game_id_param, CURRENT_DATE, 1);
  END IF;
  
  -- 同时更新games表中的总浏览量
  UPDATE games
  SET views = COALESCE(views, 0) + 1
  WHERE id = game_id_param;
END;
$$ LANGUAGE plpgsql;

-- 创建获取游戏浏览趋势的函数
CREATE OR REPLACE FUNCTION get_game_views_trend(days_param INTEGER DEFAULT 7)
RETURNS TABLE (
  view_date DATE,
  total_views INTEGER
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    dates.date AS view_date,
    COALESCE(SUM(gv.view_count), 0)::INTEGER AS total_views
  FROM 
    (
      SELECT generate_series(
        CURRENT_DATE - (days_param - 1)::INTEGER,
        CURRENT_DATE,
        '1 day'::INTERVAL
      )::DATE AS date
    ) dates
  LEFT JOIN 
    game_views gv ON dates.date = gv.view_date
  GROUP BY 
    dates.date
  ORDER BY 
    dates.date;
END;
$$ LANGUAGE plpgsql;

-- 创建RLS策略
ALTER TABLE game_views ENABLE ROW LEVEL SECURITY;

-- 允许已认证用户读取游戏浏览数据
CREATE POLICY "允许已认证用户读取游戏浏览数据" ON game_views
  FOR SELECT USING (auth.role() = 'authenticated');

-- 允许服务角色完全访问
CREATE POLICY "允许服务角色完全访问" ON game_views
  USING (auth.role() = 'service_role');